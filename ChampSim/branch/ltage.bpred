#include "ooo_cpu.h"
#include <bitset>
#include <cstdlib>
#include <time.h>
#include <fstream>

#define TAKEN 			  1 	// Branch Taken True
#define NOT_TAKEN 		  0		// Branch Taken False

#define BIMODAL_SIZE      13  	// Number of rows in Bimodal Table

#define BIMODAL_PRED_MAX  3   	// 2 bit prediction Bimodal
#define TAGE_PRED_MAX     7   	// 3 bit prediction TAGE
#define PRED_U_MAX        3   	// 2 useful bit counter

#define BIMODAL_PRED_INIT 2   	// choose 10 out of {00, 01, 10, 11} [Weakly Taken]

#define WEAKLY_TAKEN      4   	// 100 out of {000,...,111} [Weakly Taken for TAGE]
#define WEAKLY_NOT_TAKEN  3		// 011 out of {000,...,111} [Weakly Not Taken for TAGE]

#define NUM_TAGE_TABLES   16  	// Number of TAGE tables

//####~ LOOP TABLE CONFIGS ~###############################################
#define LOOP_TABLE_SIZE   10  	// 2^10 entries in Loop Table
#define LOOP_TAG_SIZE     14    // Tag of 14 bits
#define LOOP_CONF_MAX     3     // Confidence bits [2 bits]
#define LOOP_IT_MAX       14    // Count of max iteration 2^14 iterations
#define LOOP_AGE_MAX      8     // AGE to reset iterations 2^8
//#############################################################################

#define ALTPRED_BET_MAX   15    // Alternate Prediction cap of 4 bits
#define ALTPRED_BET_INIT  8     // Init at 1000 out of {0000,...,1111} [Weakly Taken]

#define PHR_LEN           16    // Length of Path History Register

#define CLOCK_MAX         20    // Number of cycles before reset/flush -> 2^20 cycles

// Our parameters tuned to a local optimum
const uint32_t HIST[] = {2, 3, 8, 12, 17, 33, 35, 67, 97, 138, 195, 330, 517, 1193, 1741, 1930};
const uint32_t TAGE_TABLE_SIZE[] = {9,9,10,10,10,10,11,11,11,11,12,12,11,11,10,10};
const uint32_t TAGE_TAG_SIZE[] = {16, 15, 14, 14, 13, 13, 12, 12, 11, 10, 9, 9, 9, 8, 8, 7};


//#############################################################################
// For folding overflow
typedef struct CircularShiftRegister { 
    uint16_t val;
    uint16_t oldlen;
    uint16_t newlen;
} CircularShiftRegister_t;
//#############################################################################


//#############################################################################
// 2 prediction bits
typedef struct bimodVal{
    uint32_t pred;  
} bimodVal_t;
//#############################################################################


//#############################################################################
// Entries of TAGE Table
typedef struct tagVal {
    uint16_t pred;
    uint16_t tag;
    uint16_t u;

    void reset();
} tagVal_t;

void tagVal_t::reset() {
    pred = 0;
    tag = 0;
    u = 0;
}
//#############################################################################


//#############################################################################
// Entries of Loop Predictor
typedef struct loopVal{
    uint32_t loopCount;     
    uint32_t currentIter;   
    uint32_t tag;           
    uint32_t conf;          
    uint32_t age;
    bool pred;
    bool used;

    void reset();
    void init(uint32_t loopCount, uint32_t currentIter, 
        uint32_t tag, uint32_t conf, uint32_t age, bool pred, bool used);

} loopVal_t;

void loopVal_t::reset() {
    loopCount = 0;
    currentIter = 0;
    tag = 0;
    conf = 0;
    age = 0;
    pred = false;
    used = false;
}

void loopVal_t::init(uint32_t loopCount, uint32_t currentIter, 
        uint32_t tag, uint32_t conf, uint32_t age, bool pred, bool used){
    
    this->loopCount = loopCount;
    this->currentIter = currentIter;
    this->tag = tag;
    this->conf = conf;
    this->age = age;
    this->pred = pred;
    this->used = used;
}
//#############################################################################


//#############################################################################
bitset<1001> *GHR;                  // Global History Register       
uint32_t PHR;                       // Path History Register 
//#############################################################################

//#############################################################################
bimodVal_t *bimodal;                // Bimodal Table
uint32_t numBimodalEntries;         // Number of Entries in Bimodal Table
//#############################################################################

//#############################################################################
tagVal_t **tagTables;               // TAGE Tables
uint32_t *tageTableSize;            // Size of each TAGE Table
uint32_t *tageTagSize;              // Tag size of each TAGE Table
uint32_t *tageHistory;              // History length of each TAGE Table
//#############################################################################

//#############################################################################
loopVal_t *loopTable;               // Loop Table pointer
uint32_t loopTableSize;             // Number of entries in Loop Table
//#############################################################################
                  
//#############################################################################
CircularShiftRegister_t *csrIndex;  // Circular Shift Register for indexing
CircularShiftRegister_t **csrTag;   // Circular Shift Registers for tags [2 of them]
//#############################################################################

//#~ Variables to Track all Prediction quantities ~############################
bool pred_pred;       
bool altPred_pred;
int table_pred;
int altTable_pred;
uint32_t index_pred;
uint32_t altIndex_pred;
//#############################################################################
    
//#############################################################################
uint32_t *tageIndex;                // Indices for all tables
uint32_t *tageTag;                  // Tags for all tables
//#############################################################################

//#############################################################################
uint32_t clockk;                    // Clock to count cycles for reset/flush      
bool clockState;                    // Reset state
//#############################################################################

//#############################################################################
int32_t altBetterCount;             // Number of times Alternate was better
uint8_t predDir;                    // Direction of pred (Taken or Not-taken?)
//#############################################################################


//#############################################################################
void O3_CPU::initialize_branch_predictor()
{
    GHR = new bitset<1001>;

    // Init the Table size from the Global array
    tageTableSize = new uint32_t[NUM_TAGE_TABLES];
    std::copy(std::begin(TAGE_TABLE_SIZE), std::end(TAGE_TABLE_SIZE), tageTableSize);

    // Init the Tag sizes from the Global array   
    tageTagSize = new uint32_t[NUM_TAGE_TABLES];
    std::copy(std::begin(TAGE_TAG_SIZE), std::end(TAGE_TAG_SIZE), tageTagSize);
    
    // Tables to stores the entries of the TAGE Tables
    tagTables = new tagVal_t*[NUM_TAGE_TABLES];
    for(uint32_t i = 0; i < NUM_TAGE_TABLES; i++) {
        uint32_t tableSize = (1<<tageTableSize[i]);

        tagTables[i] = new tagVal_t[tableSize];
        for(uint32_t j =0; j < tableSize; j++)
            tagTables[i][j].reset();     
    }

    tageHistory = new uint32_t[NUM_TAGE_TABLES];    // Array to store the hisory length of each Table
    for (size_t i = 0; i < NUM_TAGE_TABLES; i++)
        tageHistory[i] = HIST[NUM_TAGE_TABLES-1-i]; // Copy history length from the Global Array
    
    tageIndex = new uint32_t[NUM_TAGE_TABLES];      // Indexing array for TAGE Tables
    for(uint32_t i=0; i < NUM_TAGE_TABLES; i++)   
        tageIndex[i] = 0;
     
    tageTag = new uint32_t[NUM_TAGE_TABLES];        // Tag array for each TAGE Table
    for(uint32_t i=0; i < NUM_TAGE_TABLES; i++)
        tageTag[i] = 0;
    
    // Bimodal Inits 
    numBimodalEntries = (1 << BIMODAL_SIZE);        // Number of entries in the Bimodal Table
    bimodal = new bimodVal_t[numBimodalEntries];    // Entries of Bimodal table
    for(uint32_t i=0; i< numBimodalEntries; i++)
        bimodal[i].pred = BIMODAL_PRED_INIT;        // Init the table to Weakly Taken
    //~

    // Loop Table Inits
    loopTableSize = (1<<LOOP_TABLE_SIZE);           // Number of entries in Loop Table
    loopTable = new loopVal_t[loopTableSize];       // Entries of the Loop Table
    for(uint32_t i = 0; i<loopTableSize; i++)
        loopTable[i].reset();                       // Empty out the entries of Loop Table
    //~

    // Create Circular Shift Registers for Index and Tags
    csrIndex = new CircularShiftRegister_t[NUM_TAGE_TABLES];
    csrTag = new CircularShiftRegister_t*[2];
    csrTag[0] = new CircularShiftRegister_t[NUM_TAGE_TABLES];
    csrTag[1] = new CircularShiftRegister_t[NUM_TAGE_TABLES];
    //~

    // Init the CSR 
    for(uint32_t i = 0; i<NUM_TAGE_TABLES; i++){
        csrIndex[i].val = 0;
        csrIndex[i].oldlen = tageHistory[i];
        csrIndex[i].newlen = tageTagSize[i];

        csrTag[0][i].val = 0;
        csrTag[0][i].oldlen = tageHistory[i];
        csrTag[0][i].newlen = tageTagSize[i];

        csrTag[1][i].val = 0;
        csrTag[1][i].oldlen = tageHistory[i];
        csrTag[1][i].newlen = tageTagSize[i]-1;
    }
    //~	
    
    // Init the Global Prediction Counters
    pred_pred = -1;
    altPred_pred = -1;
    table_pred = NUM_TAGE_TABLES;
    altTable_pred = NUM_TAGE_TABLES;
    //~
    
    // Init the clock and clock state
    clockk = 0;
    clockState = 0;
    //~
    
    // Init the Path History, Global History and Alternate Better Count (to Weakly Better)
    PHR = 0;
    GHR->reset();
    altBetterCount = ALTPRED_BET_INIT;
    //~
}      
//#############################################################################

 
//#############################################################################
uint8_t O3_CPU::predict_branch(uint64_t PC){

    uint32_t bimodalIndex = (PC) % (numBimodalEntries); 
    uint32_t loopIndex = (PC) % (loopTableSize);  	    
    
    // Check LOOP Counter for Prediction
    uint32_t loopTag = (PC) % (1<<LOOP_TAG_SIZE);
    if(loopTable[loopIndex].tag == loopTag &&
       loopTable[loopIndex].currentIter < loopTable[loopIndex].loopCount){  // Loop under execution
        loopTable[loopIndex].pred = TAKEN;
    } 
    else if(loopTable[loopIndex].tag == loopTag &&
          loopTable[loopIndex].currentIter == loopTable[loopIndex].loopCount) {  // Loop reached end
        loopTable[loopIndex].pred = NOT_TAKEN;
    } 

    if(loopTable[loopIndex].tag == loopTag &&
       loopTable[loopIndex].conf == LOOP_CONF_MAX) {  // Confidence level of Loop Predictor
        loopTable[loopIndex].used = true;        

        return predDir = loopTable[loopIndex].pred; // Return prediction and store prediction
    }
    //~

    // If value is not returned based on Loop Counter -> set used to false 
    loopTable[loopIndex].used = false;
    //~

    // Get TAGE Tags
    for(int i = 0; i < NUM_TAGE_TABLES; i++)
        tageTag[i] = (PC ^ csrTag[0][i].val ^ (csrTag[1][i].val << 1)) & ((1 << tageTagSize[i]) -1);

    // Get TAGE Indices
    uint32_t offset[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
    for(int i = 0; i < NUM_TAGE_TABLES; i++) 
        tageIndex[i] = (PC ^ (PC >> tageTableSize[i]) ^ csrIndex[i].val ^ PHR ^ (PHR & ((1<<offset[i])-1))) & ((1 << tageTableSize[i])-1);
    //~

    // Prepare for TAGE prediction
    pred_pred = -1;
    altPred_pred = -1;
    table_pred = NUM_TAGE_TABLES;
    altTable_pred = NUM_TAGE_TABLES;
    
    // Get the first matching TAGE Table
    for(uint32_t i = 0; i < NUM_TAGE_TABLES; i++) 
        if(tagTables[i][tageIndex[i]].tag == tageTag[i]) {  
            table_pred = i;
            index_pred = tageIndex[i];
            break;
        }  
    
    // Check if any other tables with longer history matches the tag
    for(uint32_t i = table_pred + 1; i < NUM_TAGE_TABLES; i++)
        if(tagTables[i][tageIndex[i]].tag == tageTag[i]) {  
            altTable_pred = i;
            altIndex_pred = tageIndex[i];
            break;
        } 
    //~ 

    if(table_pred < NUM_TAGE_TABLES) {                  // If table was found
        if(altTable_pred == NUM_TAGE_TABLES) {          // No alternate table found
            altPred_pred = (bimodal[bimodalIndex].pred > BIMODAL_PRED_MAX/2);  
        } 
        else {                                          // Alternate table found
            if(tagTables[altTable_pred][altIndex_pred].pred >= TAGE_PRED_MAX/2)  
                    altPred_pred = TAKEN;
                else 
                    altPred_pred = NOT_TAKEN;
        }
        
        if((tagTables[table_pred][index_pred].pred  != WEAKLY_NOT_TAKEN) ||  
            (tagTables[table_pred][index_pred].pred != WEAKLY_TAKEN) ||     
            (tagTables[table_pred][index_pred].u != 0) ||                     
            (altBetterCount < ALTPRED_BET_INIT)) {            // Decide between altPred and Pred                
            
            pred_pred = tagTables[table_pred][index_pred].pred >= TAGE_PRED_MAX/2;
            return predDir = pred_pred; 
        } 
        else {
            return predDir = altPred_pred;  
        }
    } 
    else {                                              // If no table found return Bimodal Prediction only
        altPred_pred = (bimodal[bimodalIndex].pred > BIMODAL_PRED_MAX/2);  
        return predDir = altPred_pred;  
    }
}
//#############################################################################

 
//#############################################################################
void O3_CPU::last_branch_result(uint64_t PC, uint8_t taken){
     
    uint32_t bimodalIndex = (PC) % (numBimodalEntries);  

    uint32_t loopIndex = (PC) % (loopTableSize);
    uint32_t loopTag = (PC) & (1<<LOOP_TAG_SIZE);
     
    if(loopTable[loopIndex].tag != loopTag && loopTable[loopIndex].age > 0) // Tag Miss
        loopTable[loopIndex].age -= 1;                                      
    else {  
        if(loopTable[loopIndex].age == 0){                                  // Entry is old
            loopTable[loopIndex].init((1<<LOOP_IT_MAX), 1, 
                ((PC)%(1<<LOOP_TAG_SIZE)), 0, (1<<LOOP_AGE_MAX)+1, 0, loopTable[loopIndex].used); // Init new LoopTable entry
        } 
        else {
            if(loopTable[loopIndex].pred == taken) {                        // Prediction was correct
                if(loopTable[loopIndex].currentIter != loopTable[loopIndex].loopCount){
                    loopTable[loopIndex].currentIter += 1;
                } 
                else if(loopTable[loopIndex].currentIter == loopTable[loopIndex].loopCount){
                    loopTable[loopIndex].currentIter = 0;
                    if(loopTable[loopIndex].conf < LOOP_CONF_MAX)
                        loopTable[loopIndex].conf += 1;                     // Increase confidence 
                }
            } 
            else {  
                if(loopTable[loopIndex].age == (1<<LOOP_AGE_MAX)) { 
                    loopTable[loopIndex].loopCount = loopTable[loopIndex].currentIter;
                    loopTable[loopIndex].currentIter = 0;
                    loopTable[loopIndex].conf = 1;                     
                } 
                else
                    loopTable[loopIndex].init(0, 0, 0, 0, 0, false, loopTable[loopIndex].used);
            }
        }

        if(loopTable[loopIndex].used)       // Got prediction from LoopTable? No need to proceed
            return;
    }
     
    // Update Bimodal Table
    int predictionVal = -1;
    int altPredVal = -1;
    if(table_pred < NUM_TAGE_TABLES) {  
         
        predictionVal = tagTables[table_pred][index_pred].pred; 

        if(taken && predictionVal < TAGE_PRED_MAX)          // If taken and not max
            ++(tagTables[table_pred][index_pred].pred);     // Increment Counter
        else if(!taken && predictionVal > 0)                
            --(tagTables[table_pred][index_pred].pred);  
        
        altPredVal = -1;
        if(altTable_pred != NUM_TAGE_TABLES)                // If alternate prediction present
            altPredVal = tagTables[altTable_pred][altIndex_pred].pred;
        
        if(tagTables[table_pred][index_pred].u == 0 && altPredVal != -1) {
            if(taken && altPredVal < TAGE_PRED_MAX)
                ++(tagTables[altTable_pred][altIndex_pred].pred);
            else if(!taken && altPredVal > 0)
                --(tagTables[altTable_pred][altIndex_pred].pred);
        } 
    } 
    else {  
        predictionVal = bimodal[bimodalIndex].pred;
        if(taken && predictionVal < BIMODAL_PRED_MAX)   // If taken and not max
            ++(bimodal[bimodalIndex].pred);             // Increment prediction counter
        else if(!taken && predictionVal > 0) 
            --(bimodal[bimodalIndex].pred);
    }
    //~
    
    // Update altBetterCount
    if(table_pred < NUM_TAGE_TABLES) {                  // Table hit
        if((tagTables[table_pred][index_pred].u == 0) &&                     
            ((tagTables[table_pred][index_pred].pred  == WEAKLY_NOT_TAKEN) ||  
                (tagTables[table_pred][index_pred].pred  == WEAKLY_TAKEN))) {    // Entry unused and weakly confused            
            
            // Its new in the table
            if (pred_pred != altPred_pred) {                    // If predictions are different
                if (altPred_pred == taken) {                    
                    if (altBetterCount < ALTPRED_BET_MAX)       // Increment if alternate was correct
                        altBetterCount++;                    
                } 
                else if (altBetterCount > 0)                    // Decrement if alternate was wrong
                    altBetterCount--;                            
            }
        }
    }
    //~
     
    if (((predDir != taken) & (table_pred > 0))) {          // Prediction wrong and no tag hit
        bool alloc = false;
        for (int i = 0; i < table_pred; i++) 
            if (tagTables[i][tageIndex[i]].u == 0)          // Find useful tables
                alloc = true;

        if (!alloc) {                                       // If none
            for (int i = table_pred - 1; i >= 0; i--)
                tagTables[i][tageIndex[i]].u--;             // Decrement usefulness
        } 
        else {  
            for(int i = table_pred-1; i>=0; i--){
                if((tagTables[i][tageIndex[i]].u == 0 && !(rand()%10))) {   // Do uniform rejection sampling
                    if(taken) {  
                        tagTables[i][tageIndex[i]].pred = WEAKLY_TAKEN; 
                    } 
                    else {  
                        tagTables[i][tageIndex[i]].pred = WEAKLY_NOT_TAKEN;
                    }    

                    tagTables[i][tageIndex[i]].tag = tageTag[i];  // Reset tag
                    tagTables[i][tageIndex[i]].u = 0;             // Reset usefulness
                    break; 
                }
            }
        }
    }
     
    if(table_pred < NUM_TAGE_TABLES) {  // If table hit 
        if ((predDir != altPred_pred)) {  
            if (predDir == taken && tagTables[table_pred][index_pred].u < PRED_U_MAX) // altpred not used   
                tagTables[table_pred][index_pred].u += 1;  // increment usefulness
            else if(predDir != taken && tagTables[table_pred][index_pred].u > 0)
                tagTables[table_pred][index_pred].u -= 1;  // decrement usefulness
        }  
    }
     
    clockk++;                           // Add cycle
    if(clockk == (1<<CLOCK_MAX)) { 	    // Reset after every 2^CLOCK_MAX cycles
        clockk = 0;   
        clockState = 1 - clockState;               
        
        for(uint32_t i = 0; i < NUM_TAGE_TABLES; i++)
            for(uint32_t j = 0; j < (1<<tageTableSize[i]); j++)
                tagTables[i][j].u &= (clockState+1);  // If clockstate=0, reset lower bit else upper bit
    }
      
      *GHR = (*GHR << 1); // Shift GHR
      if(taken == TAKEN)
        GHR->set(0,1); 
     
    for (int i = 0; i < NUM_TAGE_TABLES; i++) { // Perform folding on Circular Shift Registers
        csrIndex[i].val = (csrIndex[i].val << 1) + (*GHR)[0];
        csrIndex[i].val ^= ((csrIndex[i].val & (1 << csrIndex[i].newlen)) >> csrIndex[i].newlen);
        csrIndex[i].val ^= ((*GHR)[csrIndex[i].oldlen] << (csrIndex[i].oldlen % csrIndex[i].newlen));
        csrIndex[i].val &= ((1 << csrIndex[i].newlen) -1);

        csrTag[0][i].val = (csrTag[0][i].val << 1) + (*GHR)[0];
        csrTag[0][i].val ^= ((csrTag[0][i].val & (1 << csrTag[0][i].newlen)) >> csrTag[0][i].newlen);
        csrTag[0][i].val ^= ((*GHR)[csrTag[0][i].oldlen] << (csrTag[0][i].oldlen % csrTag[0][i].newlen));
        csrTag[0][i].val &= ((1 << csrTag[0][i].newlen) -1);

        csrTag[1][i].val = (csrTag[1][i].val << 1) + (*GHR)[0];
        csrTag[1][i].val ^= ((csrTag[1][i].val & (1 << csrTag[1][i].newlen)) >> csrTag[1][i].newlen);
        csrTag[1][i].val ^= ((*GHR)[csrTag[1][i].oldlen] << (csrTag[1][i].oldlen % csrTag[1][i].newlen));
        csrTag[1][i].val &= ((1 << csrTag[1][i].newlen) -1);
    }
    
    // Update Path History
    PHR = (PHR << 1);
    if(PC & 1) 
        PHR = PHR + 1;
    PHR = (PHR & ((1 << PHR_LEN) - 1));
}
//#############################################################################